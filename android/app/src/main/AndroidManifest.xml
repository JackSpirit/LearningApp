<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.example.learning_app"> <!-- IMPORTANT: Replace com.example.learning_app with your actual package name -->

    <!-- Add this permission for POST_NOTIFICATIONS (Required for Android 13+) -->
    <uses-permission android:name="android.permission.POST_NOTIFICATIONS"/>

    <!-- Optional: If you plan to use full screen intent notifications or exact alarms -->
    <!-- <uses-permission android:name="android.permission.USE_FULL_SCREEN_INTENT" /> -->
    <!-- <uses-permission android:name="android.permission.SCHEDULE_EXACT_ALARM" /> -->
    <!-- <uses-permission android:name="android.permission.VIBRATE" /> -->


    <application
        android:label="learning_app"
        android:name="${applicationName}"



        android:icon="@mipmap/ic_launcher">

        <activity
            android:name=".MainActivity"
            android:exported="true"
            android:launchMode="singleTop"
            android:taskAffinity=""
            android:theme="@style/LaunchTheme"
            android:configChanges="orientation|keyboardHidden|keyboard|screenSize|smallestScreenSize|locale|layoutDirection|fontScale|screenLayout|density|uiMode"
            android:hardwareAccelerated="true"
            android:windowSoftInputMode="adjustResize">
            <!-- Specifies an Android theme to apply to this Activity as soon as
                 the Android process has started. This theme is visible to the user
                 while the Flutter UI initializes. After that, this theme continues
                 to determine the Window background behind the Flutter UI. -->
            <meta-data
                android:name="io.flutter.embedding.android.NormalTheme"
                android:resource="@style/NormalTheme"
                />
            <intent-filter>
                <action android:name="android.intent.action.MAIN"/>
                <category android:name="android.intent.category.LAUNCHER"/>
            </intent-filter>

            <!-- Add this intent filter if you want to open a specific screen when a notification is tapped -->
            <!-- This is often handled by the firebase_messaging plugin and your Dart code, -->
            <!-- but can be useful for specific deep linking from FCM directly if not using plugin's default. -->
            <!-- <intent-filter>
                <action android:name="FLUTTER_NOTIFICATION_CLICK" />
                <category android:name="android.intent.category.DEFAULT" />
            </intent-filter> -->

        </activity>

        <!-- Don't delete the meta-data below.
             This is used by the Flutter tool to generate GeneratedPluginRegistrant.java -->
        <meta-data
            android:name="flutterEmbedding"
            android:value="2" />

        <!-- Add these meta-data tags for default FCM notification appearance -->
        <!-- Used when FCM displays a notification directly (e.g., app in background/killed) -->
        <meta-data
            android:name="com.google.firebase.messaging.default_notification_icon"
            android:resource="@mipmap/ic_launcher" />
        <!-- Ensure @mipmap/ic_launcher exists or point to your custom notification icon -->

        <meta-data
            android:name="com.google.firebase.messaging.default_notification_color"
            android:resource="@color/colorAccent" />

        <!-- Define colorAccent in res/values/colors.xml, e.g., <color name="colorAccent">#FF4081</color> -->

        <!-- Optional: Default notification channel for Android 8.0+ background notifications -->
        <!-- If not set, FCM creates a channel named "Miscellaneous". -->
        <!-- flutter_local_notifications (for foreground) creates its own channels programmatically from Dart. -->
        <meta-data
            android:name="com.google.firebase.messaging.default_notification_channel_id"
            android:value="fcm_default_channel_learning_app" />
        <!-- You would then define "fcm_default_channel_learning_app" (and its user-visible name)
             in your res/values/strings.xml, e.g.:
             <string name="fcm_default_channel_learning_app" translatable="false">fcm_default_channel_learning_app</string>
             <string name="fcm_default_channel_name">General Notifications</string>
        -->

        <!-- The FirebaseMessagingService is usually registered automatically by the
             firebase_messaging plugin. You typically DON'T need to add this manually.
             If you had a custom native service, you would declare it here:
        <service
            android:name=".java.MyFirebaseMessagingService" // Your custom service
            android:exported="false">
            <intent-filter>
                <action android:name="com.google.firebase.MESSAGING_EVENT" />
            </intent-filter>
        </service>
        -->

    </application>

    <!-- Required to query activities that can process text, see:
         https://developer.android.com/training/package-visibility and
         https://developer.android.com/reference/android/content/Intent#ACTION_PROCESS_TEXT.

         In particular, this is used by the Flutter engine in io.flutter.plugin.text.ProcessTextPlugin. -->
    <queries>
        <intent>
            <action android:name="android.intent.action.PROCESS_TEXT"/>
            <data android:mimeType="text/plain"/>
        </intent>
    </queries>
</manifest>

